<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.codeking.mybatis.mapper.CacheMapper">
    <insert id="insertEmp">
        insert into `emp`
        values (null,#{empName},#{age},#{sex},null);
    </insert>
    <select id="getEmpByEid" resultType="com.codeking.mybatis.pojo.Emp">
        select * from `emp` where e_id = #{empId};
    </select>
    <!-- 开启二级缓存的第二步 -->
    <!-- eviction属性：缓存回收策略
    LRU（Least Recently Used） – 最近最少使用的：移除最长时间不被使用的对象。
    FIFO（First in First out） – 先进先出：按对象进入缓存的顺序来移除它们。
    SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象。
    WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。
    默认的是 LRU。
    flushInterval属性：刷新间隔，单位毫秒
    默认情况是不设置，也就是没有刷新间隔，缓存仅仅调用语句时刷新
    size属性：引用数目，正整数
    代表缓存最多可以存储多少个对象，太大容易导致内存溢出
    readOnly属性：只读，true/false
    true：只读缓存；会给所有调用者返回缓存对象的相同实例。因此这些对象不能被修改。这提供了
    很重要的性能优势。
    false：读写缓存；会返回缓存对象的拷贝（通过序列化）。这会慢一些，但是安全，因此默认是
    false。
     -->
    <!-- <cache eviction="LRU"/> -->
    <!-- 引入第三方的，但是只能处理二级缓存，一级缓存无法替代 -->
    <cache type="org.mybatis.caches.ehcache.EhcacheCache"/>
</mapper>

